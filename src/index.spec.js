import { alpha, mix, mixBlack, mixWhite, toHex, toHsl, toObject, toRgb } from './index';

describe('alpha()', () => {
  it.each`
    input                   | a      | expectedResult
    ${null}                 | ${0}   | ${null}
    ${'potato'}             | ${0}   | ${null}
    ${'#f00'}               | ${0.5} | ${'rgba(255, 0, 0, 0.5)'}
    ${'#ff0000'}            | ${0.5} | ${'rgba(255, 0, 0, 0.5)'}
    ${'#ffffff'}            | ${0.5} | ${'rgba(255, 255, 255, 0.5)'}
    ${'#ff000000'}          | ${0.5} | ${'rgba(255, 0, 0, 0.5)'}
    ${'rgb(255, 0, 0)'}     | ${0.5} | ${'rgba(255, 0, 0, 0.5)'}
    ${'rgb(255,0,0)'}       | ${0.5} | ${'rgba(255, 0, 0, 0.5)'}
    ${'rgb(255, 255, 255)'} | ${0.5} | ${'rgba(255, 255, 255, 0.5)'}
    ${'rgb(255,255,255)'}   | ${0.5} | ${'rgba(255, 255, 255, 0.5)'}
    ${'rgb(0, 255, 0)'}     | ${0.1} | ${'rgba(0, 255, 0, 0.1)'}
    ${'hsl(0, 100%, 50%)'}  | ${0.5} | ${'rgba(255, 0, 0, 0.5)'}
    ${'hsl(0,100%,50%)'}    | ${0.5} | ${'rgba(255, 0, 0, 0.5)'}
  `('returns $expectedResult for $input', ({ input, a, expectedResult }) => {
    const result = alpha(input, a);

    expect(result).toEqual(expectedResult);
  });
});

describe('mix()', () => {
  it.each`
    color1                  | color2    | ratio   | expectedResult
    ${null}                 | ${null}   | ${0.5}  | ${null}
    ${'#fff'}               | ${null}   | ${0.5}  | ${null}
    ${null}                 | ${'#fff'} | ${0.5}  | ${null}
    ${'#f00'}               | ${'#000'} | ${0.5}  | ${'#800000'}
    ${'#ff0000'}            | ${'#000'} | ${0.5}  | ${'#800000'}
    ${'#5bc6e8'}            | ${'#000'} | ${0.16} | ${'#0f2025'}
    ${'rgb(255, 0, 0)'}     | ${'#000'} | ${0.5}  | ${'#800000'}
    ${'rgb(255,0,0)'}       | ${'#000'} | ${0.5}  | ${'#800000'}
    ${'rgb(0, 255, 0)'}     | ${'#000'} | ${0.1}  | ${'#001a00'}
    ${'hsl(0, 100%, 50%)'}  | ${'#000'} | ${0.5}  | ${'#800000'}
    ${'hsl(0,100%,50%)'}    | ${'#000'} | ${0.5}  | ${'#800000'}
    ${'hsl(0, 0%, 100%)'}   | ${'#000'} | ${0.5}  | ${'#808080'}
    ${'hsl(0,0%,100%)'}     | ${'#000'} | ${0.5}  | ${'#808080'}
    ${'#f00'}               | ${'#fff'} | ${0.5}  | ${'#ff8080'}
    ${'#ff0000'}            | ${'#fff'} | ${0.5}  | ${'#ff8080'}
    ${'#5bc6e8'}            | ${'#fff'} | ${0.16} | ${'#e5f6fb'}
    ${'rgb(255, 0, 0)'}     | ${'#fff'} | ${0.5}  | ${'#ff8080'}
    ${'rgb(255,0,0)'}       | ${'#fff'} | ${0.5}  | ${'#ff8080'}
    ${'rgb(255, 255, 255)'} | ${'#fff'} | ${0.5}  | ${'#ffffff'}
    ${'rgb(255,255,255)'}   | ${'#fff'} | ${0.5}  | ${'#ffffff'}
    ${'rgb(0, 255, 0)'}     | ${'#fff'} | ${0.1}  | ${'#e6ffe6'}
    ${'hsl(0, 100%, 50%)'}  | ${'#fff'} | ${0.5}  | ${'#ff8080'}
    ${'hsl(0,100%,50%)'}    | ${'#fff'} | ${0.5}  | ${'#ff8080'}
    ${'hsl(0, 0%, 100%)'}   | ${'#fff'} | ${0.5}  | ${'#ffffff'}
    ${'hsl(0,0%,100%)'}     | ${'#fff'} | ${0.5}  | ${'#ffffff'}
  `(
    'returns $expectedResult for $color1, $color2, $ratio',
    ({ color1, color2, ratio, expectedResult }) => {
      const result = mix(color1, color2, ratio);

      expect(result).toEqual(expectedResult);
    },
  );
});

describe('mixBlack()', () => {
  it.each`
    input                   | ratio   | expectedResult
    ${null}                 | ${0}    | ${null}
    ${'potato'}             | ${0}    | ${null}
    ${'#f00'}               | ${0.5}  | ${'#800000'}
    ${'#ff0000'}            | ${0.5}  | ${'#800000'}
    ${'#5bc6e8'}            | ${0.16} | ${'#0f2025'}
    ${'rgb(255, 0, 0)'}     | ${0.5}  | ${'#800000'}
    ${'rgb(255,0,0)'}       | ${0.5}  | ${'#800000'}
    ${'rgb(255, 255, 255)'} | ${0.5}  | ${'#808080'}
    ${'rgb(255,255,255)'}   | ${0.5}  | ${'#808080'}
    ${'rgb(0, 255, 0)'}     | ${0.1}  | ${'#001a00'}
    ${'hsl(0, 100%, 50%)'}  | ${0.5}  | ${'#800000'}
    ${'hsl(0,100%,50%)'}    | ${0.5}  | ${'#800000'}
    ${'hsl(0, 0%, 100%)'}   | ${0.5}  | ${'#808080'}
    ${'hsl(0,0%,100%)'}     | ${0.5}  | ${'#808080'}
  `('returns $expectedResult for $input, $ratio', ({ input, ratio, expectedResult }) => {
    const result = mixBlack(input, ratio);

    expect(result).toEqual(expectedResult);
  });
});

describe('mixWhite()', () => {
  it.each`
    input                   | ratio   | expectedResult
    ${null}                 | ${0}    | ${null}
    ${'potato'}             | ${0}    | ${null}
    ${'#f00'}               | ${0.5}  | ${'#ff8080'}
    ${'#ff0000'}            | ${0.5}  | ${'#ff8080'}
    ${'#5bc6e8'}            | ${0.16} | ${'#e5f6fb'}
    ${'rgb(255, 0, 0)'}     | ${0.5}  | ${'#ff8080'}
    ${'rgb(255,0,0)'}       | ${0.5}  | ${'#ff8080'}
    ${'rgb(255, 255, 255)'} | ${0.5}  | ${'#ffffff'}
    ${'rgb(255,255,255)'}   | ${0.5}  | ${'#ffffff'}
    ${'rgb(0, 255, 0)'}     | ${0.1}  | ${'#e6ffe6'}
    ${'rgba(0, 0, 0, 0.1)'} | ${1}    | ${'#e6e6e6'}
    ${'hsl(0, 100%, 50%)'}  | ${0.5}  | ${'#ff8080'}
    ${'hsl(0,100%,50%)'}    | ${0.5}  | ${'#ff8080'}
    ${'hsl(0, 0%, 100%)'}   | ${0.5}  | ${'#ffffff'}
    ${'hsl(0,0%,100%)'}     | ${0.5}  | ${'#ffffff'}
  `('returns $expectedResult for $input, $ratio', ({ input, ratio, expectedResult }) => {
    const result = mixWhite(input, ratio);

    expect(result).toEqual(expectedResult);
  });
});

describe('toHex()', () => {
  it.each`
    input                        | expectedResult
    ${null}                      | ${null}
    ${'potato'}                  | ${null}
    ${'#f00'}                    | ${'#ff0000'}
    ${'#ff0000'}                 | ${'#ff0000'}
    ${'#ffffff'}                 | ${'#ffffff'}
    ${'#ff000000'}               | ${'#ff000000'}
    ${'#ff00001a'}               | ${'#ff00001a'}
    ${'#ff0000ff'}               | ${'#ff0000ff'}
    ${'rgb(255, 0, 0)'}          | ${'#ff0000'}
    ${'rgb(255,0,0)'}            | ${'#ff0000'}
    ${'rgb(255, 255, 255)'}      | ${'#ffffff'}
    ${'rgb(255,255,255)'}        | ${'#ffffff'}
    ${'rgba(255, 0, 0, 0)'}      | ${'#ff000000'}
    ${'rgba(255,0,0,0)'}         | ${'#ff000000'}
    ${'rgba(255, 0, 0, 0.1)'}    | ${'#ff00001a'}
    ${'rgba(255,0,0,.1)'}        | ${'#ff00001a'}
    ${'rgba(255, 0, 0, 1)'}      | ${'#ff0000ff'}
    ${'rgba(255,0,0,1)'}         | ${'#ff0000ff'}
    ${'hsl(0, 100%, 50%)'}       | ${'#ff0000'}
    ${'hsl(0,100%,50%)'}         | ${'#ff0000'}
    ${'hsl(0, 0%, 100%)'}        | ${'#ffffff'}
    ${'hsl(0,0%,100%)'}          | ${'#ffffff'}
    ${'hsla(0, 100%, 50%, 0)'}   | ${'#ff000000'}
    ${'hsla(0, 100%, 50%, 0.1)'} | ${'#ff00001a'}
    ${'hsla(0, 100%, 50%, 1)'}   | ${'#ff0000ff'}
  `('returns $expectedResult for $input', ({ input, expectedResult }) => {
    const result = toHex(input);

    expect(result).toEqual(expectedResult);
  });
});

describe('toHsl()', () => {
  it.each`
    input                     | expectedResult
    ${null}                   | ${null}
    ${'potato'}               | ${null}
    ${'#f00'}                 | ${'hsl(0, 100%, 50%)'}
    ${'#ff0000'}              | ${'hsl(0, 100%, 50%)'}
    ${'#ff8000'}              | ${'hsl(30, 100%, 50%)'}
    ${'#ffff00'}              | ${'hsl(60, 100%, 50%)'}
    ${'#80ff00'}              | ${'hsl(90, 100%, 50%)'}
    ${'#00ff00'}              | ${'hsl(120, 100%, 50%)'}
    ${'#00ff80'}              | ${'hsl(150, 100%, 50%)'}
    ${'#00ffff'}              | ${'hsl(180, 100%, 50%)'}
    ${'#0080ff'}              | ${'hsl(210, 100%, 50%)'}
    ${'#0000ff'}              | ${'hsl(240, 100%, 50%)'}
    ${'#8000ff'}              | ${'hsl(270, 100%, 50%)'}
    ${'#ff00ff'}              | ${'hsl(300, 100%, 50%)'}
    ${'#ff0080'}              | ${'hsl(330, 100%, 50%)'}
    ${'#ffffff'}              | ${'hsl(0, 0%, 100%)'}
    ${'#ff000000'}            | ${'hsla(0, 100%, 50%, 0)'}
    ${'#ff00001a'}            | ${'hsla(0, 100%, 50%, 0.1)'}
    ${'#ff0000ff'}            | ${'hsla(0, 100%, 50%, 1)'}
    ${'rgb(255, 0, 0)'}       | ${'hsl(0, 100%, 50%)'}
    ${'rgb(255,0,0)'}         | ${'hsl(0, 100%, 50%)'}
    ${'rgb(255, 128, 0)'}     | ${'hsl(30, 100%, 50%)'}
    ${'rgb(255, 255, 0)'}     | ${'hsl(60, 100%, 50%)'}
    ${'rgb(128, 255, 0)'}     | ${'hsl(90, 100%, 50%)'}
    ${'rgb(0, 255, 0)'}       | ${'hsl(120, 100%, 50%)'}
    ${'rgb(0, 255, 128)'}     | ${'hsl(150, 100%, 50%)'}
    ${'rgb(0, 255, 255)'}     | ${'hsl(180, 100%, 50%)'}
    ${'rgb(0, 128, 255)'}     | ${'hsl(210, 100%, 50%)'}
    ${'rgb(0, 0, 255)'}       | ${'hsl(240, 100%, 50%)'}
    ${'rgb(128, 0, 255)'}     | ${'hsl(270, 100%, 50%)'}
    ${'rgb(255, 0, 255)'}     | ${'hsl(300, 100%, 50%)'}
    ${'rgb(255, 0, 128)'}     | ${'hsl(330, 100%, 50%)'}
    ${'rgb(255, 255, 255)'}   | ${'hsl(0, 0%, 100%)'}
    ${'rgb(255,255,255)'}     | ${'hsl(0, 0%, 100%)'}
    ${'rgba(255, 0, 0, 0)'}   | ${'hsla(0, 100%, 50%, 0)'}
    ${'rgba(255,0,0,0)'}      | ${'hsla(0, 100%, 50%, 0)'}
    ${'rgba(255, 0, 0, 0.1)'} | ${'hsla(0, 100%, 50%, 0.1)'}
    ${'rgba(255,0,0,.1)'}     | ${'hsla(0, 100%, 50%, 0.1)'}
    ${'rgba(255, 0, 0, 1)'}   | ${'hsla(0, 100%, 50%, 1)'}
    ${'hsl(0, 100%, 50%)'}    | ${'hsl(0, 100%, 50%)'}
    ${'hsl(0,100%,50%)'}      | ${'hsl(0, 100%, 50%)'}
    ${'hsl(0, 0%, 100%)'}     | ${'hsl(0, 0%, 100%)'}
    ${'hsl(0,0%,100%)'}       | ${'hsl(0, 0%, 100%)'}
  `('returns $expectedResult for $input', ({ input, expectedResult }) => {
    const result = toHsl(input);

    expect(result).toEqual(expectedResult);
  });
});

describe('toObject()', () => {
  it.each`
    input                     | expectedResult
    ${null}                   | ${null}
    ${'potato'}               | ${null}
    ${'#f00'}                 | ${{ r: 255, g: 0, b: 0 }}
    ${'#ff0000'}              | ${{ r: 255, g: 0, b: 0 }}
    ${'#ffffff'}              | ${{ r: 255, g: 255, b: 255 }}
    ${'#ff000000'}            | ${{ r: 255, g: 0, b: 0, a: 0 }}
    ${'#ff00001a'}            | ${{ r: 255, g: 0, b: 0, a: 0.1 }}
    ${'#ff0000ff'}            | ${{ r: 255, g: 0, b: 0, a: 1 }}
    ${'rgb(255, 0, 0)'}       | ${{ r: 255, g: 0, b: 0 }}
    ${'rgb(255,0,0)'}         | ${{ r: 255, g: 0, b: 0 }}
    ${'rgb(255, 255, 255)'}   | ${{ r: 255, g: 255, b: 255 }}
    ${'rgb(255,255,255)'}     | ${{ r: 255, g: 255, b: 255 }}
    ${'rgba(255, 0, 0, 0)'}   | ${{ r: 255, g: 0, b: 0, a: 0 }}
    ${'rgba(255,0,0,0)'}      | ${{ r: 255, g: 0, b: 0, a: 0 }}
    ${'rgba(255, 0, 0, 0.1)'} | ${{ r: 255, g: 0, b: 0, a: 0.1 }}
    ${'rgba(255,0,0,.1)'}     | ${{ r: 255, g: 0, b: 0, a: 0.1 }}
    ${'rgba(255, 0, 0, 1)'}   | ${{ r: 255, g: 0, b: 0, a: 1 }}
    ${'hsl(0, 100%, 50%)'}    | ${{ r: 255, g: 0, b: 0 }}
    ${'hsl(0,100%,50%)'}      | ${{ r: 255, g: 0, b: 0 }}
    ${'hsl(0, 0%, 100%)'}     | ${{ r: 255, g: 255, b: 255 }}
    ${'hsl(0,0%,100%)'}       | ${{ r: 255, g: 255, b: 255 }}
  `('returns $expectedResult for $input', ({ input, expectedResult }) => {
    const result = toObject(input);

    expect(result).toEqual(expectedResult);
  });
});

describe('toRgb()', () => {
  it.each`
    input                     | expectedResult
    ${null}                   | ${null}
    ${'potato'}               | ${null}
    ${'#f00'}                 | ${'rgb(255, 0, 0)'}
    ${'#ff0000'}              | ${'rgb(255, 0, 0)'}
    ${'#ffffff'}              | ${'rgb(255, 255, 255)'}
    ${'#ff000000'}            | ${'rgba(255, 0, 0, 0)'}
    ${'#ff00001a'}            | ${'rgba(255, 0, 0, 0.1)'}
    ${'#ff0000ff'}            | ${'rgba(255, 0, 0, 1)'}
    ${'rgb(255,0,0)'}         | ${'rgb(255, 0, 0)'}
    ${'rgb(255, 0, 0)'}       | ${'rgb(255, 0, 0)'}
    ${'rgba(255,0,0,0)'}      | ${'rgba(255, 0, 0, 0)'}
    ${'rgba(255, 0, 0, 0)'}   | ${'rgba(255, 0, 0, 0)'}
    ${'rgba(255,0,0,.1)'}     | ${'rgba(255, 0, 0, 0.1)'}
    ${'rgba(255, 0, 0, 0.1)'} | ${'rgba(255, 0, 0, 0.1)'}
    ${'rgba(255, 0, 0, 1)'}   | ${'rgba(255, 0, 0, 1)'}
    ${'hsl(0, 100%, 50%)'}    | ${'rgb(255, 0, 0)'}
    ${'hsl(0,100%,50%)'}      | ${'rgb(255, 0, 0)'}
    ${'hsl(0, 0%, 100%)'}     | ${'rgb(255, 255, 255)'}
    ${'hsl(0,0%,100%)'}       | ${'rgb(255, 255, 255)'}
  `('returns $expectedResult for $input', ({ input, expectedResult }) => {
    const result = toRgb(input);

    expect(result).toEqual(expectedResult);
  });
});
